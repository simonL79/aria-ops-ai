
import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Loader2, UserCheck, RefreshCw, Plus } from 'lucide-react';
import { Input } from '@/components/ui/input';

interface AliasGeneratorProps {
  entityName: string;
  onAliasesGenerated: (aliases: string[]) => void;
}

export const AliasGenerator = ({ entityName, onAliasesGenerated }: AliasGeneratorProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [aliases, setAliases] = useState<string[]>([]);
  const [customAlias, setCustomAlias] = useState('');
  const [autoGenerated, setAutoGenerated] = useState(false);

  // Auto-generate when entity name changes
  useEffect(() => {
    if (entityName && entityName.length > 2 && !autoGenerated) {
      const timer = setTimeout(() => {
        generateAliases();
        setAutoGenerated(true);
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [entityName, autoGenerated]);

  const generateAliases = async () => {
    if (!entityName || entityName.length < 2) return;

    setIsGenerating(true);
    try {
      console.log(`🏷️ A.R.I.A™ Alias Generation: ${entityName}`);
      
      // Simulate AI processing
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const generatedAliases = generateNameVariants(entityName);
      setAliases(generatedAliases);
      onAliasesGenerated(generatedAliases);
      
    } catch (error) {
      console.error('Alias generation error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateNameVariants = (name: string): string[] => {
    const variants: string[] = [name]; // Always include original
    const nameParts = name.trim().split(/\s+/);
    
    if (nameParts.length === 2) {
      // Person name variants
      const [first, last] = nameParts;
      variants.push(
        `${first} ${last[0]}.`, // John D.
        `${first[0]}. ${last}`, // J. Doe
        `${first[0]}${last[0]}`, // JD
        `${first.toLowerCase()}${last.toLowerCase()}`, // johndoe
        `${first}_${last}`, // john_doe
        `@${first.toLowerCase()}${last.toLowerCase()}` // @johndoe
      );
    } else if (nameParts.length === 1) {
      // Single name or brand
      const base = nameParts[0];
      variants.push(
        base.toLowerCase(),
        base.toUpperCase(),
        `@${base.toLowerCase()}`,
        `${base} Inc`,
        `${base} Corp`,
        `${base} LLC`
      );
    } else if (nameParts.length > 2) {
      // Multi-word entity
      const initials = nameParts.map(part => part[0]).join('');
      variants.push(
        initials,
        initials.toLowerCase(),
        nameParts.join(''),
        nameParts.join('_'),
        nameParts.join('-')
      );
    }

    // Add common business suffixes if it looks like a company
    if (/\b(company|corp|inc|ltd|llc|group|solutions|services|consulting)\b/i.test(name)) {
      const baseName = name.replace(/\b(company|corp|inc|ltd|llc|group|solutions|services|consulting)\b/gi, '').trim();
      if (baseName) {
        variants.push(
          baseName,
          `${baseName} Inc`,
          `${baseName} Corp`,
          `${baseName} LLC`,
          `${baseName} Group`
        );
      }
    }

    // Remove duplicates and empty strings
    return [...new Set(variants.filter(v => v && v.length > 0))];
  };

  const addCustomAlias = () => {
    if (customAlias && !aliases.includes(customAlias)) {
      const newAliases = [...aliases, customAlias];
      setAliases(newAliases);
      onAliasesGenerated(newAliases);
      setCustomAlias('');
    }
  };

  const removeAlias = (aliasToRemove: string) => {
    const newAliases = aliases.filter(alias => alias !== aliasToRemove);
    setAliases(newAliases);
    onAliasesGenerated(newAliases);
  };

  const regenerateAliases = () => {
    setAutoGenerated(false);
    setAliases([]);
    generateAliases();
  };

  return (
    <Card className="border-green-200 bg-green-50/30">
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <UserCheck className="h-4 w-4 text-green-600" />
            <span className="text-sm font-medium">Auto-Generated Aliases</span>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={regenerateAliases}
            disabled={isGenerating}
          >
            <RefreshCw className={`h-3 w-3 ${isGenerating ? 'animate-spin' : ''}`} />
          </Button>
        </div>
        
        {isGenerating && (
          <div className="flex items-center gap-2 text-sm text-green-600 mb-3">
            <Loader2 className="h-4 w-4 animate-spin" />
            <span>Generating name variants...</span>
          </div>
        )}
        
        {aliases.length > 0 && (
          <div className="space-y-3">
            <div className="flex flex-wrap gap-1">
              {aliases.map((alias, index) => (
                <Badge
                  key={index}
                  variant="secondary"
                  className="cursor-pointer hover:bg-red-100"
                  onClick={() => removeAlias(alias)}
                >
                  {alias}
                  <span className="ml-1 text-xs">×</span>
                </Badge>
              ))}
            </div>
            
            <div className="flex gap-2">
              <Input
                placeholder="Add custom alias..."
                value={customAlias}
                onChange={(e) => setCustomAlias(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomAlias()}
                className="text-sm"
              />
              <Button
                size="sm"
                onClick={addCustomAlias}
                disabled={!customAlias}
              >
                <Plus className="h-3 w-3" />
              </Button>
            </div>
            
            <div className="text-xs text-muted-foreground">
              Generated {aliases.length} monitoring variants. Click to remove, or add custom aliases.
            </div>
          </div>
        )}
        
        {!aliases.length && !isGenerating && (
          <div className="text-sm text-muted-foreground">
            Enter entity name to generate monitoring aliases
          </div>
        )}
      </CardContent>
    </Card>
  );
};
