
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { FileText, Download, Send } from 'lucide-react';
import { toast } from 'sonner';

const DocumentGenerator = () => {
  const [documentType, setDocumentType] = useState('');
  const [entityName, setEntityName] = useState('');
  const [targetPlatform, setTargetPlatform] = useState('');
  const [threatDescription, setThreatDescription] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedDocument, setGeneratedDocument] = useState('');

  const documentTypes = [
    { value: 'cease-desist', label: 'Cease & Desist Letter' },
    { value: 'dmca', label: 'DMCA Takedown Notice' },
    { value: 'defamation', label: 'Defamation Demand Letter' },
    { value: 'retraction', label: 'Retraction Notice' },
    { value: 'copyright', label: 'Copyright Infringement Claim' },
    { value: 'privacy', label: 'Privacy Violation Notice' }
  ];

  const generateDocument = async () => {
    if (!documentType || !entityName || !threatDescription) {
      toast.error('Please fill in all required fields');
      return;
    }

    setIsGenerating(true);
    
    try {
      // Simulate document generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const document = generateDocumentTemplate();
      setGeneratedDocument(document);
      toast.success('Legal document generated successfully');
    } catch (error) {
      toast.error('Failed to generate document');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateDocumentTemplate = () => {
    const currentDate = new Date().toLocaleDateString();
    const selectedType = documentTypes.find(type => type.value === documentType);
    
    return `${selectedType?.label}

Date: ${currentDate}

TO: ${targetPlatform || '[Platform/Individual]'}

RE: ${entityName} - ${selectedType?.label}

Dear Sir/Madam,

This letter serves as formal notice regarding content published on your platform that contains false, defamatory, and damaging statements about ${entityName}.

DESCRIPTION OF INFRINGING CONTENT:
${threatDescription}

We demand that you:
1. Immediately remove the aforementioned content
2. Cease any further publication of similar content
3. Provide written confirmation of compliance within 48 hours

This matter is of urgent concern and requires immediate attention. Failure to comply may result in legal proceedings being commenced against you without further notice.

We reserve all rights and remedies available at law and in equity.

Sincerely,

Legal Department
A.R.I.A™ Legal + Tactical Operations

---
This document was automatically generated by A.R.I.A™ Legal System
Generated on: ${currentDate}`;
  };

  const downloadDocument = () => {
    if (!generatedDocument) return;
    
    const blob = new Blob([generatedDocument], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${documentType}-${entityName}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Document downloaded successfully');
  };

  return (
    <Card className="corporate-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 corporate-heading">
          <FileText className="h-5 w-5 text-corporate-accent" />
          Legal Document Generator
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="documentType">Document Type</Label>
            <Select value={documentType} onValueChange={setDocumentType}>
              <SelectTrigger>
                <SelectValue placeholder="Select document type" />
              </SelectTrigger>
              <SelectContent>
                {documentTypes.map(type => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="entityName">Entity Name</Label>
            <Input
              id="entityName"
              value={entityName}
              onChange={(e) => setEntityName(e.target.value)}
              placeholder="Enter entity name"
            />
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="targetPlatform">Target Platform/Individual</Label>
          <Input
            id="targetPlatform"
            value={targetPlatform}
            onChange={(e) => setTargetPlatform(e.target.value)}
            placeholder="Enter platform or individual name"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="threatDescription">Threat Description</Label>
          <Textarea
            id="threatDescription"
            value={threatDescription}
            onChange={(e) => setThreatDescription(e.target.value)}
            placeholder="Describe the threat or violation in detail"
            rows={4}
          />
        </div>

        <Button 
          onClick={generateDocument} 
          disabled={isGenerating}
          className="w-full bg-corporate-accent hover:bg-corporate-accentDark text-black"
        >
          <FileText className="h-4 w-4 mr-2" />
          {isGenerating ? 'Generating Document...' : 'Generate Legal Document'}
        </Button>

        {generatedDocument && (
          <div className="space-y-4">
            <div className="border border-corporate-border rounded-lg p-4 bg-corporate-darkSecondary">
              <Label>Generated Document Preview</Label>
              <pre className="text-sm text-corporate-lightGray mt-2 whitespace-pre-wrap max-h-64 overflow-y-auto">
                {generatedDocument}
              </pre>
            </div>
            
            <div className="flex gap-2">
              <Button onClick={downloadDocument} variant="outline" className="flex-1">
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button 
                onClick={() => toast.info('Send functionality would integrate with email service')} 
                variant="outline" 
                className="flex-1"
              >
                <Send className="h-4 w-4 mr-2" />
                Send
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default DocumentGenerator;
